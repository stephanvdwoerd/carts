pico-8 cartridge // http://www.pico-8.com
version 18
__lua__

function _init() 
t =0
⧗=0

x=64
y=64
vx=0
vy=0
mspd=2
acc=0.03
drag=0.99
p=1
f= false


bubbles={}

wier={}
points={}
crab={
	x=30,
	y=112,
	m=1,
	f = false
	
}
for i = 0,127 do
	add(points,
	0)
end

for i = 1,15 do
	local h = rnd(1)

	local ff = false
	
	if h >0.5 then
		ff= false
	else
 	ff=true
	end
	add(wier,{
	x=rnd(128),
	y=120,
	f=ff
	})
	
end

end

function _draw()
	t+=1
	⧗+=1
 if btn(⬆️) then
 	vy-= acc
 end
 if btn(⬇️) then
 	vy+= acc
 end
 
 if btn(➡️) then
 	vx+= acc
 end
 
 if btn(⬅️) then
 	vx-= acc
 end
 
 vx *= drag
 x += vx
 y += vy
 if x > 128 then x= 0 end 
 if x < 0 then x= 128 end 
 if vx > mspd then vx= mspd end 
 if vy > mspd then vy= mspd end 

 if vx <0 then
 f = false
 elseif vx > 0 then
 f = true
 end
 
 if t <10 then
 	p =1
 elseif t <20 then
  p = 4
 else
 	t=0
 end




cls(14)
rectfill(0,26,128,128,15)
rectfill(0,27,128,128,9)
circfill(35,32,15,9)
circfill(35,30,10,10)

circfill(80,points[81],8,2)
line(70,points[81],90,points[81],7)
circfill(80,points[81]-12,5,2)
for x1=0,127 do
	
	local yo = sin((x1+⧗)/15)*1.5 
	local yb = sin(⧗/200)*4
	local y1 = yb+25 + yo
	line(x1,128,x1,y1+1,12)
	pset(x1,y1,7)
	
	for i in all(bubbles) do
		if abs(i.x-x1)<i.r and abs(i.y-y1)<i.r then
			del(bubbles,i)
		end
	end
	points[x1+1] = y1
	if  y-y1<-1 then
		vy+=0.005 * abs(y-y1)/10
		if vy > 1.5 then
			vy= 1.5
		end
	end
end



if rnd(1) <0.1 then
	 add(bubbles,
	 {x =rnd(128),
	 y= 28+rnd(100),
	 vx=0,
	 vy=-1-rnd(1)+0.9,
	 r= 1+ flr(rnd(2))
	 })
end

for i in all(bubbles) do
 i.y+=i.vy
 circ(i.x,i.y,i.r,7)
	if abs(i.x-x)<(12+i.r) and abs(i.y-y)<8+i.r then
		del(bubbles,i)
	end
end



if  128-y<3 then

	vy-=0.5
	if vy < -1 then
		vy= -1
	end
end

if crab.x > 128 -8 then crab.m = -1
	 crab.f = true end
if crab.x <0 +8 then crab.m = 1 
crab.f =false end
	crab.x+=0.5 * crab.m

	spr(p,x-12,y-8,3,2,f)
	spr(10,crab.x,crab.y,2,2,crab.f)
	print(crab.m)
for i in all(wier) do
		if t ==5 then
			i.f= not i.f
		end
		
	 --spr(8,i.x,i.y,1,1,i.f)
	 sspr(64,0,8,8,i.x,i.y-8,16,16,i.f)
	 --sspr(spritesheet_x,spritesheet_y,spritesheet_width,spritesheet_height,x,y,optional_width,optional_height,optional_flip_x,optional_flip_y)
	 


end

end


__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000000000000000000000000000000000
0070070000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000
0007700000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000
00077000000001110000000000000000000001110000000000000000000000000000b00000000000000000000000000000000000000000000000000000000000
00700700000014411000000000000000000014411000000000000000000000000000b00000000000808000000000008800000000000000000000000000000000
0000000000004444410000000000440000004444410000000004400000000000000b000000000000808000000000008800000000000000000000000000000000
0000000000001414400000000004400000041414400000000044000000000000000b000000000000808000000000008800000000000000000000000000000000
00000000444444444444449794440000004044444444449794004400000000000000000000000000088000710071008000000000000000000000000000000000
00000000000004444444449790000440000004444444449790044000000000000000000000000000008000778877008000000000000000000000000000000000
00000000000000000444449794004400044444444444449794440000000000000000000000000000008888888888888000000000000000000000000000000000
00000000000000000400000000444000000000000000000000000000000000000000000000000000000088888888800000000000000000000000000000000000
00000000000044004000000000000000000000000000000000000000000000000000000000000000000008888888000000000000000000000000000000000000
00000000000000440000000000000000000000000000000000000000000000000000000000000000000008888888000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000088888888800000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000800800080080000000000000000000000000000000000
